How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Viewing diff quickly outlined all the changes made in the newer version of the file.
Instead of looking into the whole file for the error, this enabled reducing the number of lines 
to be inspected to trace the bug introduced while the file was changed, saving a lot of time and effort.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Getting entire history of a file enables you to technically go back in time, which sounds 
fascinating, letting you have more control over all the changes you made in the past.
This allows you to make bigger and risky changes that most of the programmers do very 
reluctantly lest they should break things up ending in nothing. But having entire history 
means you are free to take risks and get back to a working version any time you want.
In long term, this feature makes it easier to try and test risky stuffs and restore back to 
working version in minutes enabling a programmer to experiment freely, making him more efficient 
in taking decisions.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The advantage of choosing to commit manually as in git is that you can choose a rational point
to commit a new version that makes sense with your development progress. This way you can arrange 
your progress neatly and comprehensively. With automatic systems like Google docs, the versions are 
automatically created which makes it a lot difficult to determine which specific point or version 
in the past you are looking for when browsing the previous versions.
	Cons - Manual commit can be missed at times which could lead in loss of data or versions 
with bigger commits making them nearly unyielding. Automatic commits, on the other hand, keep making 
versions, leaving no chance of data loss.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

In a code repository, almost all the files are linked to each other. Changes made to a file might require changing other files too. Tracking files collectively would help restore a file along with all its related files at a time. On the other hand, a separate tracking can only help restore a single file and finding corresponding valid versions of related files can be not only a daunting task but also nearly impossible for large projects. Hence, Git allows saving multiple files in one commit to track multiple file changes altogether.

How can you use the commands git log and git diff to view the history of files?

The git log command can be used to see the history and details of commits and their IDs. The git diff command can then be used to compare two commits using their IDs selected from the output by the git log command.

How might using version control make you more confident to make changes that
could break something?

    Fill in your answer here

Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here